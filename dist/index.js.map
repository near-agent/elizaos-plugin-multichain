{"version":3,"sources":["../src/utils/multichain.ts","../src/providers/wallet.ts","../src/actions/transfer.ts","../src/index.ts"],"names":["Bitcoin","EVM","elizaLogger"],"mappings":"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","file":"index.js","sourcesContent":["import BigNumber from \"bignumber.js\";\nimport { BTCNetworkIds, NearNetworkIds } from \"multichain-tools\";\nimport { ChainSignaturesConfig } from \"../types\";\nimport { IAgentRuntime } from \"@elizaos/core\";\n\nexport const CHAIN_SIGNATURES_CONFIG: Record<NearNetworkIds, ChainSignaturesConfig> = {\n    mainnet: {\n        nearNetworkId: \"mainnet\",\n        contract: \"v1.signer\",\n    },\n    testnet: {\n        nearNetworkId: \"testnet\",\n        contract: \"v1.signer-prod.testnet\",\n    }\n}\n\nexport type CHAIN_TYPE = \"BTC\" | \"EVM\";\n\nexport const CHAIN_SIGNATURES_DERIVATION_PATHS: Record<CHAIN_TYPE, string> = {\n    \"BTC\": \"bitcoin-1\",\n    \"EVM\": \"evm-1\",\n}\n\nexport const MEMPOOL_API_URL: Record<Exclude<BTCNetworkIds, \"regtest\">, string> = {\n    mainnet: \"https://mempool.space/api\",\n    testnet: \"https://mempool.space/testnet4/api\", // use testnet4 as testnet3 will be deprecated\n}\n\nexport function getDerivationPath(chainType: CHAIN_TYPE): string {\n    return CHAIN_SIGNATURES_DERIVATION_PATHS[chainType];\n}\n\nexport function getBitcoinConfig(runtime: IAgentRuntime) {\n    const nearNetworkId = runtime.getSetting(\"NEAR_NETWORK\") as NearNetworkIds ?? \"testnet\";\n    const providerUrl = runtime.getSetting(\"BTC_PROVIDER_URL\") \n        ?? (nearNetworkId === 'mainnet' ? MEMPOOL_API_URL.mainnet : MEMPOOL_API_URL.testnet);\n    const network = runtime.getSetting(\"BTC_NETWORK\") as BTCNetworkIds ?? \"testnet\";\n    return {\n        ...CHAIN_SIGNATURES_CONFIG[nearNetworkId],\n        network,\n        providerUrl,\n    }\n}\n\nexport function getEvmConfig(runtime: IAgentRuntime) {\n    const nearNetworkId = runtime.getSetting(\"NEAR_NETWORK\") as NearNetworkIds ?? \"testnet\";\n    const providerUrl = runtime.getSetting(\"EVM_PROVIDER_URL\") ?? \"https://sepolia.drpc.org\";\n    return {\n        ...CHAIN_SIGNATURES_CONFIG[nearNetworkId],\n        providerUrl,\n    }\n}\n\nexport function parseAmount(\n    n: BigNumber | string | number,\n    decimals: number,\n): BigNumber {\n    return BigNumber(n).shiftedBy(decimals);\n}\n\nexport function parseBTC(n: number): number {\n    return parseAmount(n, 8).toNumber();\n}\n\nexport function parseETH(n: number): number {\n    return parseAmount(n, 18).toNumber();\n}\n","import {\n    type IAgentRuntime,\n    type Memory,\n    type Provider,\n    type State,\n    elizaLogger,\n} from \"@elizaos/core\";\nimport { Bitcoin, EVM } from \"multichain-tools\";\nimport NodeCache from \"node-cache\";\nimport { getBitcoinConfig, getDerivationPath, getEvmConfig } from \"../utils/multichain\";\nimport { DerivedAddresses } from \"../types\";\n\nexport class DerivedAddressProvider implements Provider {\n    private cache: NodeCache;\n\n    constructor(private accountId: string) {\n        this.cache = new NodeCache({ stdTTL: 300 }); // Cache TTL set to 5 minutes\n    }\n\n    async get(\n        runtime: IAgentRuntime,\n        _message: Memory,\n        _state?: State\n    ): Promise<DerivedAddresses | null> {\n        return this.getDerivedAddress(runtime);\n    }\n\n    async getDerivedAddress(runtime: IAgentRuntime): Promise<DerivedAddresses | null> {\n        try {\n            const cacheKey = `derived-addresses-${this.accountId}`;\n            const cachedValue = this.cache.get<DerivedAddresses>(cacheKey);\n    \n            if (cachedValue) {\n                elizaLogger.log(\"Cache hit for fetchPortfolioValue\");\n                return cachedValue;\n            }\n\n            // get BTC derived address\n            const bitcoin = new Bitcoin(getBitcoinConfig(runtime));\n            const { address: btcAddress } = await bitcoin.deriveAddressAndPublicKey(this.accountId, getDerivationPath(\"BTC\"));\n\n            // get EVM derived address\n            const evm = new EVM(getEvmConfig(runtime));\n            const { address: evmAddress } = await evm.deriveAddressAndPublicKey(this.accountId, getDerivationPath(\"EVM\"));\n\n            const addresses = {\n                btc: btcAddress,\n                evm: evmAddress,\n            };\n            elizaLogger.info(`Chain Signatures derived addresses:`, addresses);\n            this.cache.set(cacheKey, addresses);\n\n            return addresses;\n        } catch (error) {\n            elizaLogger.error(`Error in derived address provider: ${error}`);\n            return null;\n        }\n    }\n}\n\nconst walletProvider: Provider = {\n    get: async (\n        runtime: IAgentRuntime,\n        _message: Memory,\n        _state?: State\n    ): Promise<DerivedAddresses | null> => {\n        try {\n            const accountId = runtime.getSetting(\"NEAR_ADDRESS\");\n            if (!accountId) {\n                throw new Error(\"NEAR_ADDRESS not configured\");\n            }\n            const provider = new DerivedAddressProvider(accountId);\n            return await provider.get(runtime, _message, _state);\n        } catch (error) {\n            elizaLogger.error(`Error in get derived address provider: ${error}`);\n            return null;\n        }\n    },\n};\n\nexport { walletProvider };\n","import {\n    type ActionExample,\n    type Content,\n    type HandlerCallback,\n    type IAgentRuntime,\n    type Memory,\n    ModelClass,\n    type State,\n    elizaLogger,\n    type Action,\n    composeContext,\n    generateObject,\n} from \"@elizaos/core\";\nimport type { KeyPairString } from \"near-api-js/lib/utils\";\nimport { Bitcoin, EVM, signAndSend } from \"multichain-tools\";\nimport { KeyPair } from \"near-api-js\";\nimport { z, type ZodType } from \"zod\";\nimport { getBitcoinConfig, getDerivationPath, getEvmConfig, parseBTC, parseETH } from \"../utils/multichain\";\n\nexport interface TransferContent extends Content {\n    recipient: string;\n    amount: string | number;\n    symbol: string;\n}\n\nexport const TransferSchema: ZodType = z.object({\n    recipient: z.string(),\n    amount: z.string().or(z.number()),\n    symbol: z.enum([\"BTC\", \"ETH\"]),\n});\n\nfunction isTransferContent(\n    _runtime: IAgentRuntime,\n    content: unknown\n): content is TransferContent {\n    return (\n        typeof (content as TransferContent).recipient === \"string\" &&\n        (typeof (content as TransferContent).amount === \"string\" ||\n            typeof (content as TransferContent).amount === \"number\") &&\n        typeof (content as TransferContent).symbol === \"string\"\n    );\n}\n\nconst transferTemplate = `Respond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined.\n\nExample response:\n\\`\\`\\`json\n{\n    \"recipient\": \"tb1qc3m2lp0e23f9s30ajh3fpj5qm2h4j2z50xev47\",\n    \"amount\": \"0.001\",\n    \"symbol: \"BTC\",\n}\n\\`\\`\\`\n\n{{recentMessages}}\n\nGiven the recent messages and wallet information below:\n\n{{walletInfo}}\n\nExtract the following information about the requested token transfer:\n- Recipient address\n- Amount to transfer\n- Symbol of the token to transfer\n\nRespond with a JSON markdown block containing only the extracted values.`;\n\nasync function transferBTC(\n    runtime: IAgentRuntime,\n    recipient: string,\n    amount: string\n): Promise<string> {\n    const accountId = runtime.getSetting(\"NEAR_ADDRESS\");\n    const secretKey = runtime.getSetting(\"NEAR_WALLET_SECRET_KEY\");\n\n    if (!accountId || !secretKey) {\n        throw new Error(\"NEAR wallet credentials not configured\");\n    }\n\n    const config = getBitcoinConfig(runtime);\n    const bitcoin = new Bitcoin(config);\n\n    const derivationPath = getDerivationPath(\"BTC\");\n    const { address, publicKey } = await bitcoin.deriveAddressAndPublicKey(accountId, derivationPath);\n\n    const response = await signAndSend.keyPair.signAndSendBTCTransaction({\n        transaction: {\n            to: recipient,\n            value: parseBTC(Number(amount)).toFixed(),\n            from: address,\n            publicKey: publicKey,\n        },\n        chainConfig: {\n            network: config.network,\n            providerUrl: config.providerUrl,\n            contract: config.contract,\n        },\n        nearAuthentication: {\n            accountId: accountId,\n            networkId: config.nearNetworkId,\n        },\n        derivationPath,\n    }, KeyPair.fromString(secretKey as KeyPairString));\n\n    if (response.success) {\n        return response.transactionHash;\n    } else {\n        throw new Error(`Transfer BTC failed with error: ${response.errorMessage}`);\n    }\n}\n\nasync function transferEth(\n    runtime: IAgentRuntime,\n    recipient: string,\n    amount: string\n): Promise<string> {\n    const accountId = runtime.getSetting(\"NEAR_ADDRESS\");\n    const secretKey = runtime.getSetting(\"NEAR_WALLET_SECRET_KEY\");\n\n    if (!accountId || !secretKey) {\n        throw new Error(\"NEAR wallet credentials not configured\");\n    }\n\n    const config = getEvmConfig(runtime);\n    const evm = new EVM(config);\n\n    const derivationPath = getDerivationPath(\"EVM\");\n    const { address } = await evm.deriveAddressAndPublicKey(accountId, derivationPath);\n\n    const response = await signAndSend.keyPair.signAndSendEVMTransaction({\n        transaction: {\n            to: recipient,\n            value: parseETH(Number(amount)).toFixed(),\n            from: address,\n        },\n        chainConfig: {\n            providerUrl: config.providerUrl,\n            contract: config.contract,\n        },\n        nearAuthentication: {\n            accountId: accountId,\n            networkId: config.nearNetworkId,\n        },\n        derivationPath,\n    }, KeyPair.fromString(secretKey as KeyPairString));\n\n    if (response.success) {\n        return response.transactionHash;\n    } else {\n        throw new Error(`Transfer ETH failed with error: ${response.errorMessage}`);\n    }\n}\n\nasync function transfer(\n    runtime: IAgentRuntime,\n    symbol: string,\n    recipient: string,\n    amount: string\n): Promise<string> {\n    switch (symbol) {\n        case \"BTC\":\n            return transferBTC(runtime, recipient, amount);\n        case \"ETH\":\n            return transferEth(runtime, recipient, amount);\n        default:\n            throw new Error(`Unsupported symbol to transfer: ${symbol}`);\n    }\n}\n\nexport const executeTransfer: Action = {\n    name: \"MULTI_CHAIN_TRANSFER_TOKEN\",\n    similes: [\"MULTI_CHAIN_SEND_TOKEN\", \"MULTI_CHAIN_PAY_TOKEN\"],\n    validate: async (_runtime: IAgentRuntime, _message: Memory) => {\n        return true; // Add your validation logic here\n    },\n    description: \"Transfer tokens to another account on the same chain\",\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        _options: { [key: string]: unknown },\n        callback?: HandlerCallback\n    ): Promise<boolean> => {\n        // Initialize or update state\n        let currentState: State;\n\n        if (!state) {\n            currentState = (await runtime.composeState(message)) as State;\n        } else {\n            currentState = await runtime.updateRecentMessageState(state);\n        }\n\n        // Compose transfer context\n        const transferContext = composeContext({\n            state: currentState,\n            template: transferTemplate,\n        });\n\n        // Generate transfer content\n        const { object: content } = await generateObject({\n            runtime,\n            context: transferContext,\n            modelClass: ModelClass.SMALL,\n            schema: TransferSchema,\n        });\n\n        // Validate transfer content\n        if (!isTransferContent(runtime, content)) {\n            elizaLogger.error(\"Invalid content for MULTI_CHAIN_TRANSFER_TOKEN action:\", content);\n            if (callback) {\n                callback({\n                    text: \"Unable to process transfer request. Invalid content provided.\",\n                    content: { error: \"Invalid transfer content\" },\n                });\n            }\n            return false;\n        }\n\n        try {\n            const txHash = await transfer(\n                runtime,\n                content.symbol,\n                content.recipient,\n                content.amount.toString()\n            );\n\n            if (callback) {\n                callback({\n                    text: `Successfully transferred ${content.amount} ${content.symbol} to ${content.recipient}\\nTransaction: ${txHash}`,\n                    content: {\n                        success: true,\n                        signature: txHash,\n                        amount: content.amount,\n                        recipient: content.recipient,\n                    },\n                });\n            }\n\n            return true;\n        } catch (error) {\n            elizaLogger.error(`Error during ${content.symbol} transfer: ${error}`);\n            if (callback) {\n                callback({\n                    text: `Error transferring ${content.symbol}: ${error}`,\n                    content: { error: error },\n                });\n            }\n            return false;\n        }\n    },\n\n    examples: [\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Send 0.0001 BTC to tb1qc3m2lp0e23f9s30ajh3fpj5qm2h4j2z50xev47\",\n                },\n            },\n            {\n                user: \"{{user2}}\",\n                content: {\n                    text: \"I'll send 0.0001 BTC now...\",\n                    action: \"MULTI_CHAIN_SEND_TOKEN\",\n                },\n            },\n            {\n                user: \"{{user2}}\",\n                content: {\n                    text: \"Successfully sent 0.0001 BTC to tb1qc3m2lp0e23f9s30ajh3fpj5qm2h4j2z50xev47\\nTransaction: ABC123XYZ\",\n                },\n            },\n        ],\n    ] as ActionExample[][],\n} as Action;\n","import type { Plugin } from \"@elizaos/core\";\nimport { walletProvider } from \"./providers/wallet\";\nimport { executeTransfer } from \"./actions/transfer\";\n\nexport const multichainPlugin: Plugin = {\n    name: \"Multichain\",\n    description: \"Multichain Plugin for Eliza\",\n    providers: [walletProvider],\n    actions: [executeTransfer],\n    evaluators: [],\n};\n\nexport default multichainPlugin;\n"]}